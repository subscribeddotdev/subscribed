name: ci.web
on:
  push:
    paths:
      - "web/**"
      - ".github/workflows/*.web.yml"

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # tests:
  #   name: tests
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: web

  #   env:
  #     NEXT_TELEMETRY_DISABLED: 1
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: "npm"
  #         # https://github.com/actions/setup-node#caching-global-packages-data
  #         cache-dependency-path: "web/package-lock.json"

  #     - name: Install dependencies
  #       run: npm ci

  #       # As described on https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
  #     - name: Cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.npm
  #           ${{ github.workspace }}/.next/cache
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  #     - name: Generate API Client from OpenAPI
  #       run: npm run openapi

  #     - name: Type check
  #       run: npm run type-check

  #     - name: Lint
  #       run: npm run lint

  #     - name: Lint (css)
  #       run: npm run lint:css

  #     - name: Check code formatting
  #       run: npm run fmt

  #     - name: Test
  #       run: npm run test:unit

  e2e_tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    # container:
    #   image: mcr.microsoft.com/playwright:v1.46.1-jammy
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

          cache-dependency-path: "web/package-lock.json"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      # As described on https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Generate API Client from OpenAPI
        run: npm run openapi

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      # Cache Playwright browsers
      # https://github.com/microsoft/playwright/issues/7249#issuecomment-1154603556
      - name: Get Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - uses: actions/cache@v4
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}"
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run server
        run: npm run e2e:server

      - uses: cygnetdigital/wait_for_response@v2.0.0
        with:
          url: "http://localhost:8080/health"
          responseCode: "200,500"
          timeout: 30000
          interval: 250

      - name: Run tests
        run: npm run e2e

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 15

      - run: docker compose logs || true
        if: always()
