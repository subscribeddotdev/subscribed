// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for EnvironmentType.
const (
	Development EnvironmentType = "development"
	Production  EnvironmentType = "production"
)

// AddEndpointRequest defines model for AddEndpointRequest.
type AddEndpointRequest struct {
	Description  *string   `json:"description,omitempty"`
	EventTypeIds *[]string `json:"event_type_ids,omitempty"`
	Url          string    `json:"url"`
}

// ApiKey defines model for ApiKey.
type ApiKey struct {
	CreatedAt       time.Time  `json:"created_at"`
	EnvironmentId   string     `json:"environment_id"`
	ExpiresAt       *time.Time `json:"expires_at,omitempty"`
	Id              string     `json:"id"`
	MaskedSecretKey string     `json:"masked_secret_key"`
	Name            string     `json:"name"`
	OrganizationId  string     `json:"organization_id"`
}

// Application defines model for Application.
type Application struct {
	CreatedAt     time.Time `json:"created_at"`
	EnvironmentId string    `json:"environment_id"`
	Id            string    `json:"id"`
	Name          string    `json:"name"`
}

// CreateApiKeyPayload defines model for CreateApiKeyPayload.
type CreateApiKeyPayload struct {
	UnmaskedApiKey string `json:"unmasked_api_key"`
}

// CreateApiKeyRequest defines model for CreateApiKeyRequest.
type CreateApiKeyRequest struct {
	EnvironmentId string     `json:"environment_id"`
	ExpiresAt     *time.Time `json:"expires_at"`
	Name          string     `json:"name"`
}

// CreateApplicationPayload defines model for CreateApplicationPayload.
type CreateApplicationPayload struct {
	Id string `json:"id"`
}

// CreateApplicationRequest defines model for CreateApplicationRequest.
type CreateApplicationRequest struct {
	Name string `json:"name"`
}

// CreateEventTypeRequest defines model for CreateEventTypeRequest.
type CreateEventTypeRequest struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `json:"name"`
	Schema        *string `json:"schema,omitempty"`
	SchemaExample *string `json:"schema_example,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	ArchivedAt     *time.Time      `json:"archived_at,omitempty"`
	CreatedAt      time.Time       `json:"created_at"`
	Id             string          `json:"id"`
	Name           string          `json:"name"`
	OrganizationId string          `json:"organization_id"`
	Type           EnvironmentType `json:"type"`
}

// EnvironmentType defines model for Environment.Type.
type EnvironmentType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// EventType defines model for EventType.
type EventType struct {
	ArchivedAt    *time.Time `json:"archived_at,omitempty"`
	CreatedAt     time.Time  `json:"created_at"`
	Description   string     `json:"description"`
	Id            string     `json:"id"`
	Name          string     `json:"name"`
	Schema        string     `json:"schema"`
	SchemaExample string     `json:"schema_example"`
}

// GetAllApiKeysPayload defines model for GetAllApiKeysPayload.
type GetAllApiKeysPayload struct {
	Data []ApiKey `json:"data"`
}

// GetAllEnvironmentsPayload defines model for GetAllEnvironmentsPayload.
type GetAllEnvironmentsPayload struct {
	Data []Environment `json:"data"`
}

// GetApplicationByIdPayload defines model for GetApplicationByIdPayload.
type GetApplicationByIdPayload struct {
	Data Application `json:"data"`
}

// GetApplicationsPayload defines model for GetApplicationsPayload.
type GetApplicationsPayload struct {
	Data       []Application `json:"data"`
	Pagination Pagination    `json:"pagination"`
}

// GetEventTypesPayload defines model for GetEventTypesPayload.
type GetEventTypesPayload struct {
	Data       []EventType `json:"data"`
	Pagination Pagination  `json:"pagination"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	CurrentPage int `json:"current_page"`
	PerPage     int `json:"per_page"`
	Total       int `json:"total"`
	TotalPages  int `json:"total_pages"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	EventTypeId string `json:"event_type_id"`
	Payload     string `json:"payload"`
}

// SignInPayload defines model for SignInPayload.
type SignInPayload struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	Id        string `json:"id"`
	LastName  string `json:"last_name"`
	Token     string `json:"token"`
}

// SigninRequest defines model for SigninRequest.
type SigninRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Password  string `json:"password"`
}

// ApplicationId defines model for applicationId.
type ApplicationId = string

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// PaginationParamLimit defines model for paginationParamLimit.
type PaginationParamLimit = int

// PaginationParamPage defines model for paginationParamPage.
type PaginationParamPage = int

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// NotFoundError defines model for NotFoundError.
type NotFoundError = ErrorResponse

// GetAllApiKeysParams defines parameters for GetAllApiKeys.
type GetAllApiKeysParams struct {
	EnvironmentId string `form:"environment_id" json:"environment_id"`
}

// GetApplicationsParams defines parameters for GetApplications.
type GetApplicationsParams struct {
	EnvironmentID EnvironmentId `form:"environmentID" json:"environmentID"`

	// Limit The number of items per page
	Limit *PaginationParamLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Page The page number
	Page *PaginationParamPage `form:"page,omitempty" json:"page,omitempty"`
}

// GetEventTypesParams defines parameters for GetEventTypes.
type GetEventTypesParams struct {
	// Limit The number of items per page
	Limit *PaginationParamLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Page The page number
	Page *PaginationParamPage `form:"page,omitempty" json:"page,omitempty"`
}

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = CreateApiKeyRequest

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = CreateApplicationRequest

// AddEndpointJSONRequestBody defines body for AddEndpoint for application/json ContentType.
type AddEndpointJSONRequestBody = AddEndpointRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest

// CreateEventTypeJSONRequestBody defines body for CreateEventType for application/json ContentType.
type CreateEventTypeJSONRequestBody = CreateEventTypeRequest

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SigninRequest

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody = SignupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all api keys
	// (GET /api-keys)
	GetAllApiKeys(ctx echo.Context, params GetAllApiKeysParams) error
	// Create a new api key
	// (POST /api-keys)
	CreateApiKey(ctx echo.Context) error
	// Destroy a new api key given an id
	// (DELETE /api-keys/{apiKeyId})
	DestroyApiKey(ctx echo.Context, apiKeyId string) error
	// Returns a list of applications based on the org_id and environment_id
	// (GET /applications)
	GetApplications(ctx echo.Context, params GetApplicationsParams) error
	// Creates a new application
	// (POST /applications)
	CreateApplication(ctx echo.Context) error
	// Returns an application
	// (GET /applications/{applicationID})
	GetApplicationById(ctx echo.Context, applicationID ApplicationId) error
	// Add an endpoint to an application
	// (POST /applications/{applicationID}/endpoints)
	AddEndpoint(ctx echo.Context, applicationID string) error
	// Send a message to an application
	// (POST /applications/{applicationID}/messages)
	SendMessage(ctx echo.Context, applicationID ApplicationId) error
	// Get all environments
	// (GET /environments)
	GetEnvironments(ctx echo.Context) error
	// Get event types by org_id
	// (GET /event-types)
	GetEventTypes(ctx echo.Context, params GetEventTypesParams) error
	// Creates a new event type
	// (POST /event-types)
	CreateEventType(ctx echo.Context) error

	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Authenticates a user
	// (POST /signin)
	SignIn(ctx echo.Context) error
	// Creates a new organization and it's first member
	// (POST /signup)
	SignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllApiKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllApiKeys(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllApiKeysParams
	// ------------- Required query parameter "environment_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment_id", ctx.QueryParams(), &params.EnvironmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllApiKeys(ctx, params)
	return err
}

// CreateApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiKey(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApiKey(ctx)
	return err
}

// DestroyApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyApiKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiKeyId" -------------
	var apiKeyId string

	err = runtime.BindStyledParameterWithOptions("simple", "apiKeyId", ctx.Param("apiKeyId"), &apiKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiKeyId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DestroyApiKey(ctx, apiKeyId)
	return err
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationsParams
	// ------------- Required query parameter "environmentID" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentID", ctx.QueryParams(), &params.EnvironmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentID: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplications(ctx, params)
	return err
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApplication(ctx)
	return err
}

// GetApplicationById converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID ApplicationId

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApplicationById(ctx, applicationID)
	return err
}

// AddEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) AddEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID string

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEndpoint(ctx, applicationID)
	return err
}

// SendMessage converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID ApplicationId

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessage(ctx, applicationID)
	return err
}

// GetEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnvironments(ctx)
	return err
}

// GetEventTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventTypes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventTypesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventTypes(ctx, params)
	return err
}

// CreateEventType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEventType(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEventType(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api-keys", wrapper.GetAllApiKeys)
	router.POST(baseURL+"/api-keys", wrapper.CreateApiKey)
	router.DELETE(baseURL+"/api-keys/:apiKeyId", wrapper.DestroyApiKey)
	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.CreateApplication)
	router.GET(baseURL+"/applications/:applicationID", wrapper.GetApplicationById)
	router.POST(baseURL+"/applications/:applicationID/endpoints", wrapper.AddEndpoint)
	router.POST(baseURL+"/applications/:applicationID/messages", wrapper.SendMessage)
	router.GET(baseURL+"/environments", wrapper.GetEnvironments)
	router.GET(baseURL+"/event-types", wrapper.GetEventTypes)
	router.POST(baseURL+"/event-types", wrapper.CreateEventType)
	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.POST(baseURL+"/signin", wrapper.SignIn)
	router.POST(baseURL+"/signup", wrapper.SignUp)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
