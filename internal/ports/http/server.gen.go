// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for EnvironmentType.
const (
	Development EnvironmentType = "development"
	Production  EnvironmentType = "production"
)

// AddEndpointRequest defines model for AddEndpointRequest.
type AddEndpointRequest struct {
	Description  *string   `json:"description,omitempty"`
	EventTypeIds *[]string `json:"event_type_ids,omitempty"`
	Url          string    `json:"url"`
}

// ClerkWebhookEmailAddress defines model for ClerkWebhookEmailAddress.
type ClerkWebhookEmailAddress struct {
	// EmailAddress User's email address
	EmailAddress string `json:"email_address"`

	// Id Unique identifier for the email address
	Id string `json:"id"`

	// LinkedTo (Array is empty for this event)
	LinkedTo *[]map[string]interface{} `json:"linked_to"`

	// Object Object type (always "email_address" for this event)
	Object       *string `json:"object,omitempty"`
	Verification *struct {
		// Status Verification status (e.g., "verified", "unverified")
		Status *string `json:"status,omitempty"`

		// Strategy Verification strategy (e.g., "ticket", "link")
		Strategy *string `json:"strategy,omitempty"`
	} `json:"verification,omitempty"`
}

// ClerkWebhookUserCreatedData defines model for ClerkWebhookUserCreatedData.
type ClerkWebhookUserCreatedData struct {
	// Birthday User's birthday (empty string if not set)
	Birthday *string `json:"birthday,omitempty"`

	// CreatedAt Timestamp (epoch milliseconds) representing user creation time
	CreatedAt      int                        `json:"created_at"`
	EmailAddresses []ClerkWebhookEmailAddress `json:"email_addresses"`

	// ExternalAccounts (Array is empty for this event)
	ExternalAccounts *[]map[string]interface{} `json:"external_accounts,omitempty"`

	// ExternalId User's external identifier
	ExternalId *string `json:"external_id"`

	// FirstName User's first name
	FirstName *string `json:"first_name"`

	// Gender User's gender (empty string if not set)
	Gender *string `json:"gender,omitempty"`

	// Id Unique identifier for the user
	Id string `json:"id"`

	// ImageUrl User's image URL (may be redacted)
	ImageUrl *string `json:"image_url,omitempty"`

	// LastName User's last name
	LastName *string `json:"last_name"`

	// LastSignInAt Timestamp (epoch milliseconds) representing last sign-in time
	LastSignInAt *int `json:"last_sign_in_at"`

	// Object Object type (always "user" for this event)
	Object *string `json:"object,omitempty"`

	// PasswordEnabled Whether the user has password authentication enabled
	PasswordEnabled bool `json:"password_enabled"`

	// PhoneNumbers (Array is empty for this event)
	PhoneNumbers *[]map[string]interface{} `json:"phone_numbers,omitempty"`

	// PrimaryEmailAddressId Unique identifier for the primary email address
	PrimaryEmailAddressId *string `json:"primary_email_address_id"`

	// PrimaryPhoneNumberId Unique identifier for the primary phone number (null if not set)
	PrimaryPhoneNumberId *string `json:"primary_phone_number_id"`

	// PrimaryWeb3WalletId Unique identifier for the primary web3 wallet (null if not set)
	PrimaryWeb3WalletId *string `json:"primary_web3_wallet_id"`

	// PrivateMetadata User's private metadata (empty object for this event)
	PrivateMetadata *map[string]interface{} `json:"private_metadata,omitempty"`

	// ProfileImageUrl User's profile image URL (may be redacted)
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// PublicMetadata User's public metadata (empty object for this event)
	PublicMetadata *map[string]interface{} `json:"public_metadata,omitempty"`

	// TwoFactorEnabled Whether two-factor authentication is enabled
	TwoFactorEnabled bool `json:"two_factor_enabled"`

	// UnsafeMetadata User's unsafe metadata (empty object for this event)
	UnsafeMetadata *map[string]interface{} `json:"unsafe_metadata,omitempty"`

	// UpdatedAt Timestamp (epoch milliseconds) representing user update time
	UpdatedAt *int `json:"updated_at,omitempty"`

	// Username Username (null if not set)
	Username *string `json:"username"`

	// Web3Wallets (Array is empty for this event)
	Web3Wallets *[]map[string]interface{} `json:"web3_wallets,omitempty"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Data ClerkWebhookUserCreatedData `json:"data"`

	// Object Event type (always "user.created" for this event)
	Object string `json:"object"`

	// Type Event type (always "user.created" for this event)
	Type string `json:"type"`
}

// CreateApiKeyRequest defines model for CreateApiKeyRequest.
type CreateApiKeyRequest struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Name      string     `json:"name"`
}

// CreateApplicationRequest defines model for CreateApplicationRequest.
type CreateApplicationRequest struct {
	Name string `json:"name"`
}

// CreateEventTypeRequest defines model for CreateEventTypeRequest.
type CreateEventTypeRequest struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `json:"name"`
	Schema        *string `json:"schema,omitempty"`
	SchemaExample *string `json:"schema_example,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	ArchivedAt     *time.Time      `json:"archived_at,omitempty"`
	CreatedAt      time.Time       `json:"created_at"`
	Id             string          `json:"id"`
	Name           string          `json:"name"`
	OrganizationId string          `json:"organization_id"`
	Type           EnvironmentType `json:"type"`
}

// EnvironmentType defines model for Environment.Type.
type EnvironmentType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// GetAllEnvironmentsPayload defines model for GetAllEnvironmentsPayload.
type GetAllEnvironmentsPayload struct {
	Data []Environment `json:"data"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	EventTypeId string `json:"event_type_id"`
	Payload     string `json:"payload"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// CreateApiKeyParams defines parameters for CreateApiKey.
type CreateApiKeyParams struct {
	EnvironmentId string `json:"environment_id"`
}

// CreateAccountParams defines parameters for CreateAccount.
type CreateAccountParams struct {
	SvixId        string `json:"svix-id"`
	SvixTimestamp string `json:"svix-timestamp"`
	SvixSignature string `json:"svix-signature"`
}

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = CreateApiKeyRequest

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = CreateApplicationRequest

// AddEndpointJSONRequestBody defines body for AddEndpoint for application/json ContentType.
type AddEndpointJSONRequestBody = AddEndpointRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest

// CreateEventTypeJSONRequestBody defines body for CreateEventType for application/json ContentType.
type CreateEventTypeJSONRequestBody = CreateEventTypeRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new api key
	// (POST /api-keys)
	CreateApiKey(ctx echo.Context, params CreateApiKeyParams) error
	// Creates a new application
	// (POST /applications)
	CreateApplication(ctx echo.Context) error
	// Add an endpoint to an application
	// (POST /applications/{applicationID}/endpoints)
	AddEndpoint(ctx echo.Context, applicationID string) error
	// Send a message to an application
	// (POST /applications/{applicationID}/messages)
	SendMessage(ctx echo.Context, applicationID string) error
	// Get all environments
	// (GET /environments)
	GetEnvironments(ctx echo.Context) error
	// Creates a new event type
	// (POST /event-types)
	CreateEventType(ctx echo.Context) error

	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Creates a new account
	// (POST /webhooks/account)
	CreateAccount(ctx echo.Context, params CreateAccountParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiKey(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateApiKeyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "environment_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("environment_id")]; found {
		var EnvironmentId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for environment_id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "environment_id", valueList[0], &EnvironmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment_id: %s", err))
		}

		params.EnvironmentId = EnvironmentId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter environment_id is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApiKey(ctx, params)
	return err
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApplication(ctx)
	return err
}

// AddEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) AddEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID string

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEndpoint(ctx, applicationID)
	return err
}

// SendMessage converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID string

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessage(ctx, applicationID)
	return err
}

// GetEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnvironments(ctx)
	return err
}

// CreateEventType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEventType(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEventType(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAccountParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "svix-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-id")]; found {
		var SvixId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-id", valueList[0], &SvixId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-id: %s", err))
		}

		params.SvixId = SvixId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-id is required, but not found"))
	}
	// ------------- Required header parameter "svix-timestamp" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-timestamp")]; found {
		var SvixTimestamp string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-timestamp, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-timestamp", valueList[0], &SvixTimestamp, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-timestamp: %s", err))
		}

		params.SvixTimestamp = SvixTimestamp
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-timestamp is required, but not found"))
	}
	// ------------- Required header parameter "svix-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-signature")]; found {
		var SvixSignature string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-signature", valueList[0], &SvixSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-signature: %s", err))
		}

		params.SvixSignature = SvixSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api-keys", wrapper.CreateApiKey)
	router.POST(baseURL+"/applications", wrapper.CreateApplication)
	router.POST(baseURL+"/applications/:applicationID/endpoints", wrapper.AddEndpoint)
	router.POST(baseURL+"/applications/:applicationID/messages", wrapper.SendMessage)
	router.GET(baseURL+"/environments", wrapper.GetEnvironments)
	router.POST(baseURL+"/event-types", wrapper.CreateEventType)
	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.POST(baseURL+"/webhooks/account", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
