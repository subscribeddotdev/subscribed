// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MessageSendAttempt is an object representing the database table.
type MessageSendAttempt struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	MessageID      string      `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	EndpointID     string      `boil:"endpoint_id" json:"endpoint_id" toml:"endpoint_id" yaml:"endpoint_id"`
	AttemptedAt    time.Time   `boil:"attempted_at" json:"attempted_at" toml:"attempted_at" yaml:"attempted_at"`
	Status         string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Response       null.String `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`
	StatusCode     null.Int16  `boil:"status_code" json:"status_code,omitempty" toml:"status_code" yaml:"status_code,omitempty"`
	RequestHeaders null.JSON   `boil:"request_headers" json:"request_headers,omitempty" toml:"request_headers" yaml:"request_headers,omitempty"`

	R *messageSendAttemptR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L messageSendAttemptL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MessageSendAttemptColumns = struct {
	ID             string
	MessageID      string
	EndpointID     string
	AttemptedAt    string
	Status         string
	Response       string
	StatusCode     string
	RequestHeaders string
}{
	ID:             "id",
	MessageID:      "message_id",
	EndpointID:     "endpoint_id",
	AttemptedAt:    "attempted_at",
	Status:         "status",
	Response:       "response",
	StatusCode:     "status_code",
	RequestHeaders: "request_headers",
}

var MessageSendAttemptTableColumns = struct {
	ID             string
	MessageID      string
	EndpointID     string
	AttemptedAt    string
	Status         string
	Response       string
	StatusCode     string
	RequestHeaders string
}{
	ID:             "message_send_attempts.id",
	MessageID:      "message_send_attempts.message_id",
	EndpointID:     "message_send_attempts.endpoint_id",
	AttemptedAt:    "message_send_attempts.attempted_at",
	Status:         "message_send_attempts.status",
	Response:       "message_send_attempts.response",
	StatusCode:     "message_send_attempts.status_code",
	RequestHeaders: "message_send_attempts.request_headers",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MessageSendAttemptWhere = struct {
	ID             whereHelperstring
	MessageID      whereHelperstring
	EndpointID     whereHelperstring
	AttemptedAt    whereHelpertime_Time
	Status         whereHelperstring
	Response       whereHelpernull_String
	StatusCode     whereHelpernull_Int16
	RequestHeaders whereHelpernull_JSON
}{
	ID:             whereHelperstring{field: "\"message_send_attempts\".\"id\""},
	MessageID:      whereHelperstring{field: "\"message_send_attempts\".\"message_id\""},
	EndpointID:     whereHelperstring{field: "\"message_send_attempts\".\"endpoint_id\""},
	AttemptedAt:    whereHelpertime_Time{field: "\"message_send_attempts\".\"attempted_at\""},
	Status:         whereHelperstring{field: "\"message_send_attempts\".\"status\""},
	Response:       whereHelpernull_String{field: "\"message_send_attempts\".\"response\""},
	StatusCode:     whereHelpernull_Int16{field: "\"message_send_attempts\".\"status_code\""},
	RequestHeaders: whereHelpernull_JSON{field: "\"message_send_attempts\".\"request_headers\""},
}

// MessageSendAttemptRels is where relationship names are stored.
var MessageSendAttemptRels = struct {
	Endpoint string
	Message  string
}{
	Endpoint: "Endpoint",
	Message:  "Message",
}

// messageSendAttemptR is where relationships are stored.
type messageSendAttemptR struct {
	Endpoint *Endpoint `boil:"Endpoint" json:"Endpoint" toml:"Endpoint" yaml:"Endpoint"`
	Message  *Message  `boil:"Message" json:"Message" toml:"Message" yaml:"Message"`
}

// NewStruct creates a new relationship struct
func (*messageSendAttemptR) NewStruct() *messageSendAttemptR {
	return &messageSendAttemptR{}
}

func (r *messageSendAttemptR) GetEndpoint() *Endpoint {
	if r == nil {
		return nil
	}
	return r.Endpoint
}

func (r *messageSendAttemptR) GetMessage() *Message {
	if r == nil {
		return nil
	}
	return r.Message
}

// messageSendAttemptL is where Load methods for each relationship are stored.
type messageSendAttemptL struct{}

var (
	messageSendAttemptAllColumns            = []string{"id", "message_id", "endpoint_id", "attempted_at", "status", "response", "status_code", "request_headers"}
	messageSendAttemptColumnsWithoutDefault = []string{"id", "message_id", "endpoint_id", "status"}
	messageSendAttemptColumnsWithDefault    = []string{"attempted_at", "response", "status_code", "request_headers"}
	messageSendAttemptPrimaryKeyColumns     = []string{"id"}
	messageSendAttemptGeneratedColumns      = []string{}
)

type (
	// MessageSendAttemptSlice is an alias for a slice of pointers to MessageSendAttempt.
	// This should almost always be used instead of []MessageSendAttempt.
	MessageSendAttemptSlice []*MessageSendAttempt
	// MessageSendAttemptHook is the signature for custom MessageSendAttempt hook methods
	MessageSendAttemptHook func(context.Context, boil.ContextExecutor, *MessageSendAttempt) error

	messageSendAttemptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	messageSendAttemptType                 = reflect.TypeOf(&MessageSendAttempt{})
	messageSendAttemptMapping              = queries.MakeStructMapping(messageSendAttemptType)
	messageSendAttemptPrimaryKeyMapping, _ = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, messageSendAttemptPrimaryKeyColumns)
	messageSendAttemptInsertCacheMut       sync.RWMutex
	messageSendAttemptInsertCache          = make(map[string]insertCache)
	messageSendAttemptUpdateCacheMut       sync.RWMutex
	messageSendAttemptUpdateCache          = make(map[string]updateCache)
	messageSendAttemptUpsertCacheMut       sync.RWMutex
	messageSendAttemptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var messageSendAttemptAfterSelectHooks []MessageSendAttemptHook

var messageSendAttemptBeforeInsertHooks []MessageSendAttemptHook
var messageSendAttemptAfterInsertHooks []MessageSendAttemptHook

var messageSendAttemptBeforeUpdateHooks []MessageSendAttemptHook
var messageSendAttemptAfterUpdateHooks []MessageSendAttemptHook

var messageSendAttemptBeforeDeleteHooks []MessageSendAttemptHook
var messageSendAttemptAfterDeleteHooks []MessageSendAttemptHook

var messageSendAttemptBeforeUpsertHooks []MessageSendAttemptHook
var messageSendAttemptAfterUpsertHooks []MessageSendAttemptHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MessageSendAttempt) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MessageSendAttempt) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MessageSendAttempt) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MessageSendAttempt) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MessageSendAttempt) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MessageSendAttempt) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MessageSendAttempt) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MessageSendAttempt) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MessageSendAttempt) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageSendAttemptAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMessageSendAttemptHook registers your hook function for all future operations.
func AddMessageSendAttemptHook(hookPoint boil.HookPoint, messageSendAttemptHook MessageSendAttemptHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		messageSendAttemptAfterSelectHooks = append(messageSendAttemptAfterSelectHooks, messageSendAttemptHook)
	case boil.BeforeInsertHook:
		messageSendAttemptBeforeInsertHooks = append(messageSendAttemptBeforeInsertHooks, messageSendAttemptHook)
	case boil.AfterInsertHook:
		messageSendAttemptAfterInsertHooks = append(messageSendAttemptAfterInsertHooks, messageSendAttemptHook)
	case boil.BeforeUpdateHook:
		messageSendAttemptBeforeUpdateHooks = append(messageSendAttemptBeforeUpdateHooks, messageSendAttemptHook)
	case boil.AfterUpdateHook:
		messageSendAttemptAfterUpdateHooks = append(messageSendAttemptAfterUpdateHooks, messageSendAttemptHook)
	case boil.BeforeDeleteHook:
		messageSendAttemptBeforeDeleteHooks = append(messageSendAttemptBeforeDeleteHooks, messageSendAttemptHook)
	case boil.AfterDeleteHook:
		messageSendAttemptAfterDeleteHooks = append(messageSendAttemptAfterDeleteHooks, messageSendAttemptHook)
	case boil.BeforeUpsertHook:
		messageSendAttemptBeforeUpsertHooks = append(messageSendAttemptBeforeUpsertHooks, messageSendAttemptHook)
	case boil.AfterUpsertHook:
		messageSendAttemptAfterUpsertHooks = append(messageSendAttemptAfterUpsertHooks, messageSendAttemptHook)
	}
}

// One returns a single messageSendAttempt record from the query.
func (q messageSendAttemptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MessageSendAttempt, error) {
	o := &MessageSendAttempt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for message_send_attempts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MessageSendAttempt records from the query.
func (q messageSendAttemptQuery) All(ctx context.Context, exec boil.ContextExecutor) (MessageSendAttemptSlice, error) {
	var o []*MessageSendAttempt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MessageSendAttempt slice")
	}

	if len(messageSendAttemptAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MessageSendAttempt records in the query.
func (q messageSendAttemptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count message_send_attempts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q messageSendAttemptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if message_send_attempts exists")
	}

	return count > 0, nil
}

// Endpoint pointed to by the foreign key.
func (o *MessageSendAttempt) Endpoint(mods ...qm.QueryMod) endpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EndpointID),
	}

	queryMods = append(queryMods, mods...)

	return Endpoints(queryMods...)
}

// Message pointed to by the foreign key.
func (o *MessageSendAttempt) Message(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MessageID),
	}

	queryMods = append(queryMods, mods...)

	return Messages(queryMods...)
}

// LoadEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messageSendAttemptL) LoadEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessageSendAttempt interface{}, mods queries.Applicator) error {
	var slice []*MessageSendAttempt
	var object *MessageSendAttempt

	if singular {
		var ok bool
		object, ok = maybeMessageSendAttempt.(*MessageSendAttempt)
		if !ok {
			object = new(MessageSendAttempt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMessageSendAttempt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMessageSendAttempt))
			}
		}
	} else {
		s, ok := maybeMessageSendAttempt.(*[]*MessageSendAttempt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMessageSendAttempt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMessageSendAttempt))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messageSendAttemptR{}
		}
		args = append(args, object.EndpointID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageSendAttemptR{}
			}

			for _, a := range args {
				if a == obj.EndpointID {
					continue Outer
				}
			}

			args = append(args, obj.EndpointID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`endpoints`),
		qm.WhereIn(`endpoints.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Endpoint")
	}

	var resultSlice []*Endpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Endpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for endpoints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for endpoints")
	}

	if len(endpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Endpoint = foreign
		if foreign.R == nil {
			foreign.R = &endpointR{}
		}
		foreign.R.MessageSendAttempts = append(foreign.R.MessageSendAttempts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EndpointID == foreign.ID {
				local.R.Endpoint = foreign
				if foreign.R == nil {
					foreign.R = &endpointR{}
				}
				foreign.R.MessageSendAttempts = append(foreign.R.MessageSendAttempts, local)
				break
			}
		}
	}

	return nil
}

// LoadMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messageSendAttemptL) LoadMessage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessageSendAttempt interface{}, mods queries.Applicator) error {
	var slice []*MessageSendAttempt
	var object *MessageSendAttempt

	if singular {
		var ok bool
		object, ok = maybeMessageSendAttempt.(*MessageSendAttempt)
		if !ok {
			object = new(MessageSendAttempt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMessageSendAttempt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMessageSendAttempt))
			}
		}
	} else {
		s, ok := maybeMessageSendAttempt.(*[]*MessageSendAttempt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMessageSendAttempt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMessageSendAttempt))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messageSendAttemptR{}
		}
		args = append(args, object.MessageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageSendAttemptR{}
			}

			for _, a := range args {
				if a == obj.MessageID {
					continue Outer
				}
			}

			args = append(args, obj.MessageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Message = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.MessageSendAttempts = append(foreign.R.MessageSendAttempts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageID == foreign.ID {
				local.R.Message = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.MessageSendAttempts = append(foreign.R.MessageSendAttempts, local)
				break
			}
		}
	}

	return nil
}

// SetEndpoint of the messageSendAttempt to the related item.
// Sets o.R.Endpoint to related.
// Adds o to related.R.MessageSendAttempts.
func (o *MessageSendAttempt) SetEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Endpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"message_send_attempts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"endpoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, messageSendAttemptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EndpointID = related.ID
	if o.R == nil {
		o.R = &messageSendAttemptR{
			Endpoint: related,
		}
	} else {
		o.R.Endpoint = related
	}

	if related.R == nil {
		related.R = &endpointR{
			MessageSendAttempts: MessageSendAttemptSlice{o},
		}
	} else {
		related.R.MessageSendAttempts = append(related.R.MessageSendAttempts, o)
	}

	return nil
}

// SetMessage of the messageSendAttempt to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.MessageSendAttempts.
func (o *MessageSendAttempt) SetMessage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"message_send_attempts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"message_id"}),
		strmangle.WhereClause("\"", "\"", 2, messageSendAttemptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageID = related.ID
	if o.R == nil {
		o.R = &messageSendAttemptR{
			Message: related,
		}
	} else {
		o.R.Message = related
	}

	if related.R == nil {
		related.R = &messageR{
			MessageSendAttempts: MessageSendAttemptSlice{o},
		}
	} else {
		related.R.MessageSendAttempts = append(related.R.MessageSendAttempts, o)
	}

	return nil
}

// MessageSendAttempts retrieves all the records using an executor.
func MessageSendAttempts(mods ...qm.QueryMod) messageSendAttemptQuery {
	mods = append(mods, qm.From("\"message_send_attempts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"message_send_attempts\".*"})
	}

	return messageSendAttemptQuery{q}
}

// FindMessageSendAttempt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMessageSendAttempt(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MessageSendAttempt, error) {
	messageSendAttemptObj := &MessageSendAttempt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"message_send_attempts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, messageSendAttemptObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from message_send_attempts")
	}

	if err = messageSendAttemptObj.doAfterSelectHooks(ctx, exec); err != nil {
		return messageSendAttemptObj, err
	}

	return messageSendAttemptObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MessageSendAttempt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no message_send_attempts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageSendAttemptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	messageSendAttemptInsertCacheMut.RLock()
	cache, cached := messageSendAttemptInsertCache[key]
	messageSendAttemptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			messageSendAttemptAllColumns,
			messageSendAttemptColumnsWithDefault,
			messageSendAttemptColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"message_send_attempts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"message_send_attempts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into message_send_attempts")
	}

	if !cached {
		messageSendAttemptInsertCacheMut.Lock()
		messageSendAttemptInsertCache[key] = cache
		messageSendAttemptInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MessageSendAttempt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MessageSendAttempt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	messageSendAttemptUpdateCacheMut.RLock()
	cache, cached := messageSendAttemptUpdateCache[key]
	messageSendAttemptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			messageSendAttemptAllColumns,
			messageSendAttemptPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update message_send_attempts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"message_send_attempts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, messageSendAttemptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, append(wl, messageSendAttemptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update message_send_attempts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for message_send_attempts")
	}

	if !cached {
		messageSendAttemptUpdateCacheMut.Lock()
		messageSendAttemptUpdateCache[key] = cache
		messageSendAttemptUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q messageSendAttemptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for message_send_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for message_send_attempts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MessageSendAttemptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageSendAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"message_send_attempts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, messageSendAttemptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in messageSendAttempt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all messageSendAttempt")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MessageSendAttempt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no message_send_attempts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageSendAttemptColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	messageSendAttemptUpsertCacheMut.RLock()
	cache, cached := messageSendAttemptUpsertCache[key]
	messageSendAttemptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			messageSendAttemptAllColumns,
			messageSendAttemptColumnsWithDefault,
			messageSendAttemptColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			messageSendAttemptAllColumns,
			messageSendAttemptPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert message_send_attempts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(messageSendAttemptPrimaryKeyColumns))
			copy(conflict, messageSendAttemptPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"message_send_attempts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(messageSendAttemptType, messageSendAttemptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert message_send_attempts")
	}

	if !cached {
		messageSendAttemptUpsertCacheMut.Lock()
		messageSendAttemptUpsertCache[key] = cache
		messageSendAttemptUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MessageSendAttempt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MessageSendAttempt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MessageSendAttempt provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), messageSendAttemptPrimaryKeyMapping)
	sql := "DELETE FROM \"message_send_attempts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from message_send_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for message_send_attempts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q messageSendAttemptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no messageSendAttemptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from message_send_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for message_send_attempts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MessageSendAttemptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(messageSendAttemptBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageSendAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"message_send_attempts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageSendAttemptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from messageSendAttempt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for message_send_attempts")
	}

	if len(messageSendAttemptAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MessageSendAttempt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMessageSendAttempt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessageSendAttemptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MessageSendAttemptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageSendAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"message_send_attempts\".* FROM \"message_send_attempts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageSendAttemptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MessageSendAttemptSlice")
	}

	*o = slice

	return nil
}

// MessageSendAttemptExists checks if the MessageSendAttempt row exists.
func MessageSendAttemptExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"message_send_attempts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if message_send_attempts exists")
	}

	return exists, nil
}

// Exists checks if the MessageSendAttempt row exists.
func (o *MessageSendAttempt) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MessageSendAttemptExists(ctx, exec, o.ID)
}
