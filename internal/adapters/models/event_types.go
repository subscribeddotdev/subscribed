// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventType is an object representing the database table.
type EventType struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrgID         string      `boil:"org_id" json:"org_id" toml:"org_id" yaml:"org_id"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Schema        null.String `boil:"schema" json:"schema,omitempty" toml:"schema" yaml:"schema,omitempty"`
	SchemaExample null.String `boil:"schema_example" json:"schema_example,omitempty" toml:"schema_example" yaml:"schema_example,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ArchivedAt    null.Time   `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`

	R *eventTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventTypeColumns = struct {
	ID            string
	OrgID         string
	Name          string
	Description   string
	Schema        string
	SchemaExample string
	CreatedAt     string
	ArchivedAt    string
}{
	ID:            "id",
	OrgID:         "org_id",
	Name:          "name",
	Description:   "description",
	Schema:        "schema",
	SchemaExample: "schema_example",
	CreatedAt:     "created_at",
	ArchivedAt:    "archived_at",
}

var EventTypeTableColumns = struct {
	ID            string
	OrgID         string
	Name          string
	Description   string
	Schema        string
	SchemaExample string
	CreatedAt     string
	ArchivedAt    string
}{
	ID:            "event_types.id",
	OrgID:         "event_types.org_id",
	Name:          "event_types.name",
	Description:   "event_types.description",
	Schema:        "event_types.schema",
	SchemaExample: "event_types.schema_example",
	CreatedAt:     "event_types.created_at",
	ArchivedAt:    "event_types.archived_at",
}

// Generated where

var EventTypeWhere = struct {
	ID            whereHelperstring
	OrgID         whereHelperstring
	Name          whereHelperstring
	Description   whereHelpernull_String
	Schema        whereHelpernull_String
	SchemaExample whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	ArchivedAt    whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"event_types\".\"id\""},
	OrgID:         whereHelperstring{field: "\"event_types\".\"org_id\""},
	Name:          whereHelperstring{field: "\"event_types\".\"name\""},
	Description:   whereHelpernull_String{field: "\"event_types\".\"description\""},
	Schema:        whereHelpernull_String{field: "\"event_types\".\"schema\""},
	SchemaExample: whereHelpernull_String{field: "\"event_types\".\"schema_example\""},
	CreatedAt:     whereHelpertime_Time{field: "\"event_types\".\"created_at\""},
	ArchivedAt:    whereHelpernull_Time{field: "\"event_types\".\"archived_at\""},
}

// EventTypeRels is where relationship names are stored.
var EventTypeRels = struct {
	Org       string
	Endpoints string
	Messages  string
}{
	Org:       "Org",
	Endpoints: "Endpoints",
	Messages:  "Messages",
}

// eventTypeR is where relationships are stored.
type eventTypeR struct {
	Org       *Organization `boil:"Org" json:"Org" toml:"Org" yaml:"Org"`
	Endpoints EndpointSlice `boil:"Endpoints" json:"Endpoints" toml:"Endpoints" yaml:"Endpoints"`
	Messages  MessageSlice  `boil:"Messages" json:"Messages" toml:"Messages" yaml:"Messages"`
}

// NewStruct creates a new relationship struct
func (*eventTypeR) NewStruct() *eventTypeR {
	return &eventTypeR{}
}

func (r *eventTypeR) GetOrg() *Organization {
	if r == nil {
		return nil
	}
	return r.Org
}

func (r *eventTypeR) GetEndpoints() EndpointSlice {
	if r == nil {
		return nil
	}
	return r.Endpoints
}

func (r *eventTypeR) GetMessages() MessageSlice {
	if r == nil {
		return nil
	}
	return r.Messages
}

// eventTypeL is where Load methods for each relationship are stored.
type eventTypeL struct{}

var (
	eventTypeAllColumns            = []string{"id", "org_id", "name", "description", "schema", "schema_example", "created_at", "archived_at"}
	eventTypeColumnsWithoutDefault = []string{"id", "org_id", "name"}
	eventTypeColumnsWithDefault    = []string{"description", "schema", "schema_example", "created_at", "archived_at"}
	eventTypePrimaryKeyColumns     = []string{"id"}
	eventTypeGeneratedColumns      = []string{}
)

type (
	// EventTypeSlice is an alias for a slice of pointers to EventType.
	// This should almost always be used instead of []EventType.
	EventTypeSlice []*EventType
	// EventTypeHook is the signature for custom EventType hook methods
	EventTypeHook func(context.Context, boil.ContextExecutor, *EventType) error

	eventTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventTypeType                 = reflect.TypeOf(&EventType{})
	eventTypeMapping              = queries.MakeStructMapping(eventTypeType)
	eventTypePrimaryKeyMapping, _ = queries.BindMapping(eventTypeType, eventTypeMapping, eventTypePrimaryKeyColumns)
	eventTypeInsertCacheMut       sync.RWMutex
	eventTypeInsertCache          = make(map[string]insertCache)
	eventTypeUpdateCacheMut       sync.RWMutex
	eventTypeUpdateCache          = make(map[string]updateCache)
	eventTypeUpsertCacheMut       sync.RWMutex
	eventTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventTypeAfterSelectHooks []EventTypeHook

var eventTypeBeforeInsertHooks []EventTypeHook
var eventTypeAfterInsertHooks []EventTypeHook

var eventTypeBeforeUpdateHooks []EventTypeHook
var eventTypeAfterUpdateHooks []EventTypeHook

var eventTypeBeforeDeleteHooks []EventTypeHook
var eventTypeAfterDeleteHooks []EventTypeHook

var eventTypeBeforeUpsertHooks []EventTypeHook
var eventTypeAfterUpsertHooks []EventTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventTypeHook registers your hook function for all future operations.
func AddEventTypeHook(hookPoint boil.HookPoint, eventTypeHook EventTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventTypeAfterSelectHooks = append(eventTypeAfterSelectHooks, eventTypeHook)
	case boil.BeforeInsertHook:
		eventTypeBeforeInsertHooks = append(eventTypeBeforeInsertHooks, eventTypeHook)
	case boil.AfterInsertHook:
		eventTypeAfterInsertHooks = append(eventTypeAfterInsertHooks, eventTypeHook)
	case boil.BeforeUpdateHook:
		eventTypeBeforeUpdateHooks = append(eventTypeBeforeUpdateHooks, eventTypeHook)
	case boil.AfterUpdateHook:
		eventTypeAfterUpdateHooks = append(eventTypeAfterUpdateHooks, eventTypeHook)
	case boil.BeforeDeleteHook:
		eventTypeBeforeDeleteHooks = append(eventTypeBeforeDeleteHooks, eventTypeHook)
	case boil.AfterDeleteHook:
		eventTypeAfterDeleteHooks = append(eventTypeAfterDeleteHooks, eventTypeHook)
	case boil.BeforeUpsertHook:
		eventTypeBeforeUpsertHooks = append(eventTypeBeforeUpsertHooks, eventTypeHook)
	case boil.AfterUpsertHook:
		eventTypeAfterUpsertHooks = append(eventTypeAfterUpsertHooks, eventTypeHook)
	}
}

// One returns a single eventType record from the query.
func (q eventTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventType, error) {
	o := &EventType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventType records from the query.
func (q eventTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventTypeSlice, error) {
	var o []*EventType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventType slice")
	}

	if len(eventTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventType records in the query.
func (q eventTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_types exists")
	}

	return count > 0, nil
}

// Org pointed to by the foreign key.
func (o *EventType) Org(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrgID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Endpoints retrieves all the endpoint's Endpoints with an executor.
func (o *EventType) Endpoints(mods ...qm.QueryMod) endpointQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"endpoint_event_types\" on \"endpoints\".\"id\" = \"endpoint_event_types\".\"endpoint_id\""),
		qm.Where("\"endpoint_event_types\".\"event_type_id\"=?", o.ID),
	)

	return Endpoints(queryMods...)
}

// Messages retrieves all the message's Messages with an executor.
func (o *EventType) Messages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"messages\".\"event_type_id\"=?", o.ID),
	)

	return Messages(queryMods...)
}

// LoadOrg allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventTypeL) LoadOrg(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventType interface{}, mods queries.Applicator) error {
	var slice []*EventType
	var object *EventType

	if singular {
		var ok bool
		object, ok = maybeEventType.(*EventType)
		if !ok {
			object = new(EventType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventType))
			}
		}
	} else {
		s, ok := maybeEventType.(*[]*EventType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventTypeR{}
		}
		args = append(args, object.OrgID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventTypeR{}
			}

			for _, a := range args {
				if a == obj.OrgID {
					continue Outer
				}
			}

			args = append(args, obj.OrgID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Org = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.OrgEventTypes = append(foreign.R.OrgEventTypes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrgID == foreign.ID {
				local.R.Org = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrgEventTypes = append(foreign.R.OrgEventTypes, local)
				break
			}
		}
	}

	return nil
}

// LoadEndpoints allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventTypeL) LoadEndpoints(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventType interface{}, mods queries.Applicator) error {
	var slice []*EventType
	var object *EventType

	if singular {
		var ok bool
		object, ok = maybeEventType.(*EventType)
		if !ok {
			object = new(EventType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventType))
			}
		}
	} else {
		s, ok := maybeEventType.(*[]*EventType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"endpoints\".\"id\", \"endpoints\".\"application_id\", \"endpoints\".\"url\", \"endpoints\".\"description\", \"endpoints\".\"signing_secret\", \"endpoints\".\"created_at\", \"endpoints\".\"updated_at\", \"a\".\"event_type_id\""),
		qm.From("\"endpoints\""),
		qm.InnerJoin("\"endpoint_event_types\" as \"a\" on \"endpoints\".\"id\" = \"a\".\"endpoint_id\""),
		qm.WhereIn("\"a\".\"event_type_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load endpoints")
	}

	var resultSlice []*Endpoint

	var localJoinCols []string
	for results.Next() {
		one := new(Endpoint)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.ApplicationID, &one.URL, &one.Description, &one.SigningSecret, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for endpoints")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice endpoints")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on endpoints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for endpoints")
	}

	if len(endpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Endpoints = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &endpointR{}
			}
			foreign.R.EventTypes = append(foreign.R.EventTypes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Endpoints = append(local.R.Endpoints, foreign)
				if foreign.R == nil {
					foreign.R = &endpointR{}
				}
				foreign.R.EventTypes = append(foreign.R.EventTypes, local)
				break
			}
		}
	}

	return nil
}

// LoadMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventTypeL) LoadMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventType interface{}, mods queries.Applicator) error {
	var slice []*EventType
	var object *EventType

	if singular {
		var ok bool
		object, ok = maybeEventType.(*EventType)
		if !ok {
			object = new(EventType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventType))
			}
		}
	} else {
		s, ok := maybeEventType.(*[]*EventType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.event_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load messages")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Messages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.EventType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventTypeID {
				local.R.Messages = append(local.R.Messages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.EventType = local
				break
			}
		}
	}

	return nil
}

// SetOrg of the eventType to the related item.
// Sets o.R.Org to related.
// Adds o to related.R.OrgEventTypes.
func (o *EventType) SetOrg(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"org_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventTypePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrgID = related.ID
	if o.R == nil {
		o.R = &eventTypeR{
			Org: related,
		}
	} else {
		o.R.Org = related
	}

	if related.R == nil {
		related.R = &organizationR{
			OrgEventTypes: EventTypeSlice{o},
		}
	} else {
		related.R.OrgEventTypes = append(related.R.OrgEventTypes, o)
	}

	return nil
}

// AddEndpoints adds the given related objects to the existing relationships
// of the event_type, optionally inserting them as new records.
// Appends related to o.R.Endpoints.
// Sets related.R.EventTypes appropriately.
func (o *EventType) AddEndpoints(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Endpoint) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"endpoint_event_types\" (\"event_type_id\", \"endpoint_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &eventTypeR{
			Endpoints: related,
		}
	} else {
		o.R.Endpoints = append(o.R.Endpoints, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &endpointR{
				EventTypes: EventTypeSlice{o},
			}
		} else {
			rel.R.EventTypes = append(rel.R.EventTypes, o)
		}
	}
	return nil
}

// SetEndpoints removes all previously related items of the
// event_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EventTypes's Endpoints accordingly.
// Replaces o.R.Endpoints with related.
// Sets related.R.EventTypes's Endpoints accordingly.
func (o *EventType) SetEndpoints(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Endpoint) error {
	query := "delete from \"endpoint_event_types\" where \"event_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeEndpointsFromEventTypesSlice(o, related)
	if o.R != nil {
		o.R.Endpoints = nil
	}

	return o.AddEndpoints(ctx, exec, insert, related...)
}

// RemoveEndpoints relationships from objects passed in.
// Removes related items from R.Endpoints (uses pointer comparison, removal does not keep order)
// Sets related.R.EventTypes.
func (o *EventType) RemoveEndpoints(ctx context.Context, exec boil.ContextExecutor, related ...*Endpoint) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"endpoint_event_types\" where \"event_type_id\" = $1 and \"endpoint_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeEndpointsFromEventTypesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Endpoints {
			if rel != ri {
				continue
			}

			ln := len(o.R.Endpoints)
			if ln > 1 && i < ln-1 {
				o.R.Endpoints[i] = o.R.Endpoints[ln-1]
			}
			o.R.Endpoints = o.R.Endpoints[:ln-1]
			break
		}
	}

	return nil
}

func removeEndpointsFromEventTypesSlice(o *EventType, related []*Endpoint) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.EventTypes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.EventTypes)
			if ln > 1 && i < ln-1 {
				rel.R.EventTypes[i] = rel.R.EventTypes[ln-1]
			}
			rel.R.EventTypes = rel.R.EventTypes[:ln-1]
			break
		}
	}
}

// AddMessages adds the given related objects to the existing relationships
// of the event_type, optionally inserting them as new records.
// Appends related to o.R.Messages.
// Sets related.R.EventType appropriately.
func (o *EventType) AddMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &eventTypeR{
			Messages: related,
		}
	} else {
		o.R.Messages = append(o.R.Messages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				EventType: o,
			}
		} else {
			rel.R.EventType = o
		}
	}
	return nil
}

// EventTypes retrieves all the records using an executor.
func EventTypes(mods ...qm.QueryMod) eventTypeQuery {
	mods = append(mods, qm.From("\"event_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"event_types\".*"})
	}

	return eventTypeQuery{q}
}

// FindEventType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventType(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*EventType, error) {
	eventTypeObj := &EventType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, eventTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_types")
	}

	if err = eventTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventTypeObj, err
	}

	return eventTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventTypeInsertCacheMut.RLock()
	cache, cached := eventTypeInsertCache[key]
	eventTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventTypeAllColumns,
			eventTypeColumnsWithDefault,
			eventTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventTypeType, eventTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventTypeType, eventTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_types")
	}

	if !cached {
		eventTypeInsertCacheMut.Lock()
		eventTypeInsertCache[key] = cache
		eventTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventTypeUpdateCacheMut.RLock()
	cache, cached := eventTypeUpdateCache[key]
	eventTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventTypeAllColumns,
			eventTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventTypeType, eventTypeMapping, append(wl, eventTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_types")
	}

	if !cached {
		eventTypeUpdateCacheMut.Lock()
		eventTypeUpdateCache[key] = cache
		eventTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventTypeUpsertCacheMut.RLock()
	cache, cached := eventTypeUpsertCache[key]
	eventTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventTypeAllColumns,
			eventTypeColumnsWithDefault,
			eventTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventTypeAllColumns,
			eventTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert event_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventTypePrimaryKeyColumns))
			copy(conflict, eventTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventTypeType, eventTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventTypeType, eventTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_types")
	}

	if !cached {
		eventTypeUpsertCacheMut.Lock()
		eventTypeUpsertCache[key] = cache
		eventTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EventType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventTypePrimaryKeyMapping)
	sql := "DELETE FROM \"event_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_types")
	}

	if len(eventTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_types\".* FROM \"event_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventTypeSlice")
	}

	*o = slice

	return nil
}

// EventTypeExists checks if the EventType row exists.
func EventTypeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_types exists")
	}

	return exists, nil
}

// Exists checks if the EventType row exists.
func (o *EventType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventTypeExists(ctx, exec, o.ID)
}
