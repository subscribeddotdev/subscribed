// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// ClerkWebhookEmailAddress defines model for ClerkWebhookEmailAddress.
type ClerkWebhookEmailAddress struct {
	// EmailAddress User's email address
	EmailAddress string `json:"email_address"`

	// Id Unique identifier for the email address
	Id string `json:"id"`

	// LinkedTo (Array is empty for this event)
	LinkedTo *[]map[string]interface{} `json:"linked_to"`

	// Object Object type (always "email_address" for this event)
	Object       *string `json:"object,omitempty"`
	Verification *struct {
		// Status Verification status (e.g., "verified", "unverified")
		Status *string `json:"status,omitempty"`

		// Strategy Verification strategy (e.g., "ticket", "link")
		Strategy *string `json:"strategy,omitempty"`
	} `json:"verification,omitempty"`
}

// ClerkWebhookUserCreatedData defines model for ClerkWebhookUserCreatedData.
type ClerkWebhookUserCreatedData struct {
	// Birthday User's birthday (empty string if not set)
	Birthday *string `json:"birthday,omitempty"`

	// CreatedAt Timestamp (epoch milliseconds) representing user creation time
	CreatedAt      int                        `json:"created_at"`
	EmailAddresses []ClerkWebhookEmailAddress `json:"email_addresses"`

	// ExternalAccounts (Array is empty for this event)
	ExternalAccounts *[]map[string]interface{} `json:"external_accounts,omitempty"`

	// ExternalId User's external identifier
	ExternalId *string `json:"external_id"`

	// FirstName User's first name
	FirstName *string `json:"first_name"`

	// Gender User's gender (empty string if not set)
	Gender *string `json:"gender,omitempty"`

	// Id Unique identifier for the user
	Id string `json:"id"`

	// ImageUrl User's image URL (may be redacted)
	ImageUrl *string `json:"image_url,omitempty"`

	// LastName User's last name
	LastName *string `json:"last_name"`

	// LastSignInAt Timestamp (epoch milliseconds) representing last sign-in time
	LastSignInAt *int `json:"last_sign_in_at"`

	// Object Object type (always "user" for this event)
	Object *string `json:"object,omitempty"`

	// PasswordEnabled Whether the user has password authentication enabled
	PasswordEnabled bool `json:"password_enabled"`

	// PhoneNumbers (Array is empty for this event)
	PhoneNumbers *[]map[string]interface{} `json:"phone_numbers,omitempty"`

	// PrimaryEmailAddressId Unique identifier for the primary email address
	PrimaryEmailAddressId *string `json:"primary_email_address_id"`

	// PrimaryPhoneNumberId Unique identifier for the primary phone number (null if not set)
	PrimaryPhoneNumberId *string `json:"primary_phone_number_id"`

	// PrimaryWeb3WalletId Unique identifier for the primary web3 wallet (null if not set)
	PrimaryWeb3WalletId *string `json:"primary_web3_wallet_id"`

	// PrivateMetadata User's private metadata (empty object for this event)
	PrivateMetadata *map[string]interface{} `json:"private_metadata,omitempty"`

	// ProfileImageUrl User's profile image URL (may be redacted)
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// PublicMetadata User's public metadata (empty object for this event)
	PublicMetadata *map[string]interface{} `json:"public_metadata,omitempty"`

	// TwoFactorEnabled Whether two-factor authentication is enabled
	TwoFactorEnabled bool `json:"two_factor_enabled"`

	// UnsafeMetadata User's unsafe metadata (empty object for this event)
	UnsafeMetadata *map[string]interface{} `json:"unsafe_metadata,omitempty"`

	// UpdatedAt Timestamp (epoch milliseconds) representing user update time
	UpdatedAt *int `json:"updated_at,omitempty"`

	// Username Username (null if not set)
	Username *string `json:"username"`

	// Web3Wallets (Array is empty for this event)
	Web3Wallets *[]map[string]interface{} `json:"web3_wallets,omitempty"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Data ClerkWebhookUserCreatedData `json:"data"`

	// Object Event type (always "user.created" for this event)
	Object string `json:"object"`

	// Type Event type (always "user.created" for this event)
	Type string `json:"type"`
}

// CreateApplicationRequest defines model for CreateApplicationRequest.
type CreateApplicationRequest struct {
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// CreateAccountParams defines parameters for CreateAccount.
type CreateAccountParams struct {
	SvixId        string `json:"svix-id"`
	SvixTimestamp string `json:"svix-timestamp"`
	SvixSignature string `json:"svix-signature"`
}

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = CreateApplicationRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new application
	// (POST /applications)
	CreateApplication(ctx echo.Context) error

	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Creates a new account
	// (POST /webhooks/account)
	CreateAccount(ctx echo.Context, params CreateAccountParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApplication(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAccountParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "svix-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-id")]; found {
		var SvixId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "svix-id", runtime.ParamLocationHeader, valueList[0], &SvixId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-id: %s", err))
		}

		params.SvixId = SvixId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-id is required, but not found"))
	}
	// ------------- Required header parameter "svix-timestamp" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-timestamp")]; found {
		var SvixTimestamp string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-timestamp, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "svix-timestamp", runtime.ParamLocationHeader, valueList[0], &SvixTimestamp)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-timestamp: %s", err))
		}

		params.SvixTimestamp = SvixTimestamp
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-timestamp is required, but not found"))
	}
	// ------------- Required header parameter "svix-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-signature")]; found {
		var SvixSignature string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "svix-signature", runtime.ParamLocationHeader, valueList[0], &SvixSignature)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-signature: %s", err))
		}

		params.SvixSignature = SvixSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/applications", wrapper.CreateApplication)
	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.POST(baseURL+"/webhooks/account", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
