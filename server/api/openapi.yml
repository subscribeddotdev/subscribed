openapi: 3.0.3
info:
  title: subscribed-backend
  description: Subscribed's backend
  termsOfService: https://github.com/subscribeddotdev/subscribed-backend
  contact:
    email: firmino.changani@gmail.com
  license:
    name: MIT
    url: https://github.com/subscribeddotdev/subscribed-backend/LICENSE.md
  version: 0.0.1
externalDocs:
  description: https://github.com/subscribeddotdev/subscribed-backend/README.md
  url: https://github.com/subscribeddotdev/subscribed-backend
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      tags:
        - Health
      operationId: healthCheck
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
  /applications:
    post:
      tags:
        - Applications
      operationId: createApplication
      summary: Creates a new application
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationPayload'
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - Applications
      operationId: getApplications
      summary: Returns a list of applications based on the org_id and environment_id
      parameters:
        - $ref: '#/components/parameters/environmentId'
        - $ref: '#/components/parameters/paginationParamLimit'
        - $ref: '#/components/parameters/paginationParamPage'
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationsPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /applications/{applicationID}:
    get:
      tags:
        - Applications
      operationId: getApplicationById
      summary: Returns an application
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationByIdPayload'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /applications/{applicationID}/endpoints:
    post:
      tags:
        - Endpoints
      operationId: addEndpoint
      summary: Add an endpoint to an application
      security:
        - BearerAuth: [ ]
      parameters:
        - name: applicationID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEndpointRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /applications/{applicationID}/messages:
    post:
      tags:
        - Messages
      operationId: sendMessage
      summary: Send a message to an application
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/applicationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /api-keys:
    get:
      tags:
        - ApiKeys
      operationId: getAllApiKeys
      summary: Get all api keys
      security:
        - BearerAuth: [ ]
      parameters:
        - name: environment_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllApiKeysPayload'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - ApiKeys
      operationId: createApiKey
      summary: Create a new api key
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /api-keys/{apiKeyId}:
    delete:
      tags:
        - ApiKeys
      operationId: destroyApiKey
      summary: Destroy a new api key given an id
      security:
        - BearerAuth: [ ]
      parameters:
        - name: apiKeyId
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: DELETED
        default:
          $ref: '#/components/responses/DefaultError'
  /event-types:
    post:
      tags:
        - EventTypes
      operationId: createEventType
      summary: Creates a new event type
      security:
      - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventTypeRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - EventTypes
      operationId: getEventTypes
      summary: Get event types by org_id
      security:
        - BearerAuth: [ ]
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/paginationParamLimit'
        - $ref: '#/components/parameters/paginationParamPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventTypesPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /event-types/{eventTypeID}:
    get:
      tags:
        - EventTypes
      operationId: getEventTypeById
      summary: Get event type by id and org_id
      parameters:
        - name: eventTypeID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
        - ApiKeyAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventTypeByIdPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /signup:
    post:
      tags:
        - Auth
      operationId: signUp
      summary: Creates a new organization and it's first member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /signin:
    post:
      tags:
        - Auth
      operationId: signIn
      summary: Authenticates a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /environments:
    get:
      tags:
        - Environments
      operationId: getEnvironments
      summary: Get all environments
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllEnvironmentsPayload'
        default:
          $ref: '#/components/responses/DefaultError'

components:
  parameters:
    applicationId:
        name: applicationID
        in: path
        required: true
        schema:
          type: string
    environmentId:
      name: environmentID
      in: query
      required: true
      schema:
        type: string
    paginationParamLimit:
      name: limit
      description: The number of items per page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 15
    paginationParamPage:
      name: page
      description: The page number
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
  schemas:
    # Auth
    SignupRequest:
      required: [email, password, first_name, last_name]
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    SigninRequest:
      required: [ email, password ]
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    SignInPayload:
      required: [id, first_name, last_name, email, token]
      properties:
        token:
          type: string
        id:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    # Endpoints
    AddEndpointRequest:
      required: [ url ]
      properties:
        url:
          type: string
        description:
          type: string
        event_type_ids:
          type: array
          items:
            type: string
    # Applications
    Application:
      required: [id, name, environment_id, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        environment_id:
          type: string
        created_at:
          type: string
          format: date-time
    CreateApplicationRequest:
      required: [ name ]
      properties:
        name:
          type: string
    CreateApplicationPayload:
        required: [ id ]
        properties:
          id:
            type: string
    GetApplicationsPayload:
      required: [pagination, data]
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Application'
    GetApplicationByIdPayload:
      required: [ data ]
      properties:
        data:
            $ref: '#/components/schemas/Application'
    # Messages
    SendMessageRequest:
      required: [ event_type_id, payload ]
      properties:
        event_type_id:
          type: string
        payload:
          type: string
    # Event types
    CreateEventTypeRequest:
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        schema:
          type: string
        schema_example:
          type: string
    EventType:
      required: [id, name, description, schema, schema_example, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        schema:
          type: string
        schema_example:
          type: string
        archived_at:
          type: string
          format: date-time
    GetEventTypesPayload:
      required: [ pagination, data ]
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventType'
    GetEventTypeByIdPayload:
      required: [ data ]
      properties:
        data:
          $ref: '#/components/schemas/EventType'
    # API Keys
    CreateApiKeyRequest:
      required: [name, environment_id]
      properties:
        name:
          type: string
        environment_id:
          type: string
        expires_at:
          type: string
          format: date-time
          nullable: true
    CreateApiKeyPayload:
      required: [unmasked_api_key]
      properties:
        unmasked_api_key:
          type: string
    ApiKey:
      required: [id, name, masked_secret_key, organization_id, environment_id, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        environment_id:
          type: string
        masked_secret_key:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    GetAllApiKeysPayload:
      required: [ data ]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
    # Environments
    Environment:
      required: [id, name, organization_id, name, type, created_at]
      properties:
        id:
          type: string
        organization_id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - production
            - development
        created_at:
          type: string
          format: date-time
        archived_at:
          type: string
          format: date-time
    GetAllEnvironmentsPayload:
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
    # Generic models
    Pagination:
      required: [total, per_page, current_page, total_pages]
      properties:
        total:
          type: integer
        per_page:
          type: integer
        current_page:
          type: integer
        total_pages:
          type: integer
    GenericResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        message:
          type: string
          description: A description about the error
        error:
          type: string
          description: Error custom error code such as 'email_in_use'
  responses:
    UnauthorizedError:
      description: 'Usually causes by an authentication token missing'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    DefaultSuccess:
      description: 'Default message when an operation succeeds'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericResponse'
    NotFoundError:
      description: 'Item not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    DefaultError:
      description: 'A generic error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
