/* tslint:disable */
/* eslint-disable */
/**
 * subscribed-backend
 * Subscribed\'s backend
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: firmino.changani@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddEndpointRequest
 */
export interface AddEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof AddEndpointRequest
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof AddEndpointRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddEndpointRequest
     */
    'event_type_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'organization_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'environment_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'masked_secret_key': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'environment_id': string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface CreateApiKeyPayload
 */
export interface CreateApiKeyPayload {
    /**
     * 
     * @type {string}
     * @memberof CreateApiKeyPayload
     */
    'unmasked_api_key': string;
}
/**
 * 
 * @export
 * @interface CreateApiKeyRequest
 */
export interface CreateApiKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    'environment_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    'expires_at'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateApplicationPayload
 */
export interface CreateApplicationPayload {
    /**
     * 
     * @type {string}
     * @memberof CreateApplicationPayload
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CreateApplicationRequest
 */
export interface CreateApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateApplicationRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateEventTypeRequest
 */
export interface CreateEventTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateEventTypeRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEventTypeRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEventTypeRequest
     */
    'schema'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEventTypeRequest
     */
    'schema_example'?: string;
}
/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'organization_id': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'type': EnvironmentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'archived_at'?: string;
}

export const EnvironmentTypeEnum = {
    Production: 'production',
    Development: 'development'
} as const;

export type EnvironmentTypeEnum = typeof EnvironmentTypeEnum[keyof typeof EnvironmentTypeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * A description about the error
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * Error custom error code such as \'email_in_use\'
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface EventType
 */
export interface EventType {
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'schema': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'schema_example': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'archived_at'?: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetAllApiKeysPayload
 */
export interface GetAllApiKeysPayload {
    /**
     * 
     * @type {Array<ApiKey>}
     * @memberof GetAllApiKeysPayload
     */
    'data': Array<ApiKey>;
}
/**
 * 
 * @export
 * @interface GetAllEnvironmentsPayload
 */
export interface GetAllEnvironmentsPayload {
    /**
     * 
     * @type {Array<Environment>}
     * @memberof GetAllEnvironmentsPayload
     */
    'data': Array<Environment>;
}
/**
 * 
 * @export
 * @interface GetApplicationByIdPayload
 */
export interface GetApplicationByIdPayload {
    /**
     * 
     * @type {Application}
     * @memberof GetApplicationByIdPayload
     */
    'data': Application;
}
/**
 * 
 * @export
 * @interface GetApplicationsPayload
 */
export interface GetApplicationsPayload {
    /**
     * 
     * @type {Pagination}
     * @memberof GetApplicationsPayload
     */
    'pagination': Pagination;
    /**
     * 
     * @type {Array<Application>}
     * @memberof GetApplicationsPayload
     */
    'data': Array<Application>;
}
/**
 * 
 * @export
 * @interface GetEventTypesPayload
 */
export interface GetEventTypesPayload {
    /**
     * 
     * @type {Pagination}
     * @memberof GetEventTypesPayload
     */
    'pagination': Pagination;
    /**
     * 
     * @type {Array<EventType>}
     * @memberof GetEventTypesPayload
     */
    'data': Array<EventType>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total_pages': number;
}
/**
 * 
 * @export
 * @interface SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof SendMessageRequest
     */
    'event_type_id': string;
    /**
     * 
     * @type {string}
     * @memberof SendMessageRequest
     */
    'payload': string;
}
/**
 * 
 * @export
 * @interface SignInPayload
 */
export interface SignInPayload {
    /**
     * 
     * @type {string}
     * @memberof SignInPayload
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof SignInPayload
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SignInPayload
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignInPayload
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof SignInPayload
     */
    'last_name': string;
}
/**
 * 
 * @export
 * @interface SigninRequest
 */
export interface SigninRequest {
    /**
     * 
     * @type {string}
     * @memberof SigninRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SigninRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'last_name': string;
}

/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export const ApiKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new api key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (createApiKeyRequest: CreateApiKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createApiKeyRequest' is not null or undefined
            assertParamExists('createApiKey', 'createApiKeyRequest', createApiKeyRequest)
            const localVarPath = `/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApiKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Destroy a new api key given an id
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiKey: async (apiKeyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('destroyApiKey', 'apiKeyId', apiKeyId)
            const localVarPath = `/api-keys/{apiKeyId}`
                .replace(`{${"apiKeyId"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all api keys
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApiKeys: async (environmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getAllApiKeys', 'environmentId', environmentId)
            const localVarPath = `/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (environmentId !== undefined) {
                localVarQueryParameter['environment_id'] = environmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export const ApiKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new api key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiKeyPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(createApiKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeysApi.createApiKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Destroy a new api key given an id
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiKey(apiKeyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiKey(apiKeyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeysApi.destroyApiKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all api keys
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllApiKeys(environmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllApiKeysPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllApiKeys(environmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiKeysApi.getAllApiKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiKeysApi - factory interface
 * @export
 */
export const ApiKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeysApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new api key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: any): AxiosPromise<CreateApiKeyPayload> {
            return localVarFp.createApiKey(createApiKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Destroy a new api key given an id
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiKey(apiKeyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyApiKey(apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all api keys
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApiKeys(environmentId: string, options?: any): AxiosPromise<GetAllApiKeysPayload> {
            return localVarFp.getAllApiKeys(environmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export class ApiKeysApi extends BaseAPI {
    /**
     * 
     * @summary Create a new api key
     * @param {CreateApiKeyRequest} createApiKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).createApiKey(createApiKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Destroy a new api key given an id
     * @param {string} apiKeyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public destroyApiKey(apiKeyId: string, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).destroyApiKey(apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all api keys
     * @param {string} environmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public getAllApiKeys(environmentId: string, options?: RawAxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).getAllApiKeys(environmentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new application
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (createApplicationRequest: CreateApplicationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createApplicationRequest' is not null or undefined
            assertParamExists('createApplication', 'createApplicationRequest', createApplicationRequest)
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns an application
         * @param {string} applicationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationById: async (applicationID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationID' is not null or undefined
            assertParamExists('getApplicationById', 'applicationID', applicationID)
            const localVarPath = `/applications/{applicationID}`
                .replace(`{${"applicationID"}}`, encodeURIComponent(String(applicationID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of applications based on the org_id and environment_id
         * @param {string} environmentID 
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications: async (environmentID: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentID' is not null or undefined
            assertParamExists('getApplications', 'environmentID', environmentID)
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (environmentID !== undefined) {
                localVarQueryParameter['environmentID'] = environmentID;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new application
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(createApplicationRequest: CreateApplicationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApplicationPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApplication(createApplicationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.createApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns an application
         * @param {string} applicationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationById(applicationID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApplicationByIdPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationById(applicationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplicationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of applications based on the org_id and environment_id
         * @param {string} environmentID 
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplications(environmentID: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApplicationsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplications(environmentID, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.getApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new application
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(createApplicationRequest: CreateApplicationRequest, options?: any): AxiosPromise<CreateApplicationPayload> {
            return localVarFp.createApplication(createApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns an application
         * @param {string} applicationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationById(applicationID: string, options?: any): AxiosPromise<GetApplicationByIdPayload> {
            return localVarFp.getApplicationById(applicationID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of applications based on the org_id and environment_id
         * @param {string} environmentID 
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(environmentID: string, limit?: number, page?: number, options?: any): AxiosPromise<GetApplicationsPayload> {
            return localVarFp.getApplications(environmentID, limit, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new application
     * @param {CreateApplicationRequest} createApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public createApplication(createApplicationRequest: CreateApplicationRequest, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).createApplication(createApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns an application
     * @param {string} applicationID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplicationById(applicationID: string, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplicationById(applicationID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of applications based on the org_id and environment_id
     * @param {string} environmentID 
     * @param {number} [limit] The number of items per page
     * @param {number} [page] The page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public getApplications(environmentID: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).getApplications(environmentID, limit, page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticates a user
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (signinRequest: SigninRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinRequest' is not null or undefined
            assertParamExists('signIn', 'signinRequest', signinRequest)
            const localVarPath = `/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new organization and it\'s first member
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signupRequest: SignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('signUp', 'signupRequest', signupRequest)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(signinRequest: SigninRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(signinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new organization and it\'s first member
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(signinRequest: SigninRequest, options?: any): AxiosPromise<SignInPayload> {
            return localVarFp.signIn(signinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new organization and it\'s first member
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(signupRequest: SignupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.signUp(signupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Authenticates a user
     * @param {SigninRequest} signinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signIn(signinRequest: SigninRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signIn(signinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new organization and it\'s first member
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signUp(signupRequest: SignupRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signUp(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointsApi - axios parameter creator
 * @export
 */
export const EndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an endpoint to an application
         * @param {string} applicationID 
         * @param {AddEndpointRequest} addEndpointRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEndpoint: async (applicationID: string, addEndpointRequest: AddEndpointRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationID' is not null or undefined
            assertParamExists('addEndpoint', 'applicationID', applicationID)
            // verify required parameter 'addEndpointRequest' is not null or undefined
            assertParamExists('addEndpoint', 'addEndpointRequest', addEndpointRequest)
            const localVarPath = `/applications/{applicationID}/endpoints`
                .replace(`{${"applicationID"}}`, encodeURIComponent(String(applicationID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointsApi - functional programming interface
 * @export
 */
export const EndpointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an endpoint to an application
         * @param {string} applicationID 
         * @param {AddEndpointRequest} addEndpointRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEndpoint(applicationID: string, addEndpointRequest: AddEndpointRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEndpoint(applicationID, addEndpointRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointsApi.addEndpoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EndpointsApi - factory interface
 * @export
 */
export const EndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an endpoint to an application
         * @param {string} applicationID 
         * @param {AddEndpointRequest} addEndpointRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEndpoint(applicationID: string, addEndpointRequest: AddEndpointRequest, options?: any): AxiosPromise<void> {
            return localVarFp.addEndpoint(applicationID, addEndpointRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export class EndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Add an endpoint to an application
     * @param {string} applicationID 
     * @param {AddEndpointRequest} addEndpointRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public addEndpoint(applicationID: string, addEndpointRequest: AddEndpointRequest, options?: RawAxiosRequestConfig) {
        return EndpointsApiFp(this.configuration).addEndpoint(applicationID, addEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllEnvironmentsPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EnvironmentsApi.getEnvironments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvironmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(options?: any): AxiosPromise<GetAllEnvironmentsPayload> {
            return localVarFp.getEnvironments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
    /**
     * 
     * @summary Get all environments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public getEnvironments(options?: RawAxiosRequestConfig) {
        return EnvironmentsApiFp(this.configuration).getEnvironments(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventTypesApi - axios parameter creator
 * @export
 */
export const EventTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new event type
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventType: async (createEventTypeRequest: CreateEventTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventTypeRequest' is not null or undefined
            assertParamExists('createEventType', 'createEventTypeRequest', createEventTypeRequest)
            const localVarPath = `/event-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event types by org_id
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypes: async (limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/event-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventTypesApi - functional programming interface
 * @export
 */
export const EventTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new event type
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventType(createEventTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventTypesApi.createEventType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event types by org_id
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventTypes(limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventTypesPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventTypes(limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventTypesApi.getEventTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventTypesApi - factory interface
 * @export
 */
export const EventTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new event type
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createEventType(createEventTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event types by org_id
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypes(limit?: number, page?: number, options?: any): AxiosPromise<GetEventTypesPayload> {
            return localVarFp.getEventTypes(limit, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventTypesApi - object-oriented interface
 * @export
 * @class EventTypesApi
 * @extends {BaseAPI}
 */
export class EventTypesApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new event type
     * @param {CreateEventTypeRequest} createEventTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypesApi
     */
    public createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: RawAxiosRequestConfig) {
        return EventTypesApiFp(this.configuration).createEventType(createEventTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event types by org_id
     * @param {number} [limit] The number of items per page
     * @param {number} [page] The page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypesApi
     */
    public getEventTypes(limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return EventTypesApiFp(this.configuration).getEventTypes(limit, page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<void> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send a message to an application
         * @param {string} applicationID 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (applicationID: string, sendMessageRequest: SendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationID' is not null or undefined
            assertParamExists('sendMessage', 'applicationID', applicationID)
            // verify required parameter 'sendMessageRequest' is not null or undefined
            assertParamExists('sendMessage', 'sendMessageRequest', sendMessageRequest)
            const localVarPath = `/applications/{applicationID}/messages`
                .replace(`{${"applicationID"}}`, encodeURIComponent(String(applicationID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send a message to an application
         * @param {string} applicationID 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(applicationID: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(applicationID, sendMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Send a message to an application
         * @param {string} applicationID 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(applicationID: string, sendMessageRequest: SendMessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendMessage(applicationID, sendMessageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @summary Send a message to an application
     * @param {string} applicationID 
     * @param {SendMessageRequest} sendMessageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public sendMessage(applicationID: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).sendMessage(applicationID, sendMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



