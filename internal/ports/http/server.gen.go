// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for EnvironmentType.
const (
	Development EnvironmentType = "development"
	Production  EnvironmentType = "production"
)

// AddEndpointRequest defines model for AddEndpointRequest.
type AddEndpointRequest struct {
	Description  *string   `json:"description,omitempty"`
	EventTypeIds *[]string `json:"event_type_ids,omitempty"`
	Url          string    `json:"url"`
}

// ApiKey defines model for ApiKey.
type ApiKey struct {
	CreatedAt       time.Time  `json:"created_at"`
	EnvironmentId   string     `json:"environment_id"`
	ExpiresAt       *time.Time `json:"expires_at,omitempty"`
	MaskedSecretKey string     `json:"masked_secret_key"`
	Name            string     `json:"name"`
	OrganizationId  string     `json:"organization_id"`
}

// ClerkWebhookEmailAddress defines model for ClerkWebhookEmailAddress.
type ClerkWebhookEmailAddress struct {
	// EmailAddress User's email address
	EmailAddress string `json:"email_address"`

	// Id Unique identifier for the email address
	Id string `json:"id"`

	// LinkedTo (Array is empty for this event)
	LinkedTo *[]map[string]interface{} `json:"linked_to"`

	// Object Object type (always "email_address" for this event)
	Object       *string `json:"object,omitempty"`
	Verification *struct {
		// Status Verification status (e.g., "verified", "unverified")
		Status *string `json:"status,omitempty"`

		// Strategy Verification strategy (e.g., "ticket", "link")
		Strategy *string `json:"strategy,omitempty"`
	} `json:"verification,omitempty"`
}

// ClerkWebhookUserCreatedData defines model for ClerkWebhookUserCreatedData.
type ClerkWebhookUserCreatedData struct {
	// Birthday User's birthday (empty string if not set)
	Birthday *string `json:"birthday,omitempty"`

	// CreatedAt Timestamp (epoch milliseconds) representing user creation time
	CreatedAt      int                        `json:"created_at"`
	EmailAddresses []ClerkWebhookEmailAddress `json:"email_addresses"`

	// ExternalAccounts (Array is empty for this event)
	ExternalAccounts *[]map[string]interface{} `json:"external_accounts,omitempty"`

	// ExternalId User's external identifier
	ExternalId *string `json:"external_id"`

	// FirstName User's first name
	FirstName *string `json:"first_name"`

	// Gender User's gender (empty string if not set)
	Gender *string `json:"gender,omitempty"`

	// Id Unique identifier for the user
	Id string `json:"id"`

	// ImageUrl User's image URL (may be redacted)
	ImageUrl *string `json:"image_url,omitempty"`

	// LastName User's last name
	LastName *string `json:"last_name"`

	// LastSignInAt Timestamp (epoch milliseconds) representing last sign-in time
	LastSignInAt *int `json:"last_sign_in_at"`

	// Object Object type (always "user" for this event)
	Object *string `json:"object,omitempty"`

	// PasswordEnabled Whether the user has password authentication enabled
	PasswordEnabled bool `json:"password_enabled"`

	// PhoneNumbers (Array is empty for this event)
	PhoneNumbers *[]map[string]interface{} `json:"phone_numbers,omitempty"`

	// PrimaryEmailAddressId Unique identifier for the primary email address
	PrimaryEmailAddressId *string `json:"primary_email_address_id"`

	// PrimaryPhoneNumberId Unique identifier for the primary phone number (null if not set)
	PrimaryPhoneNumberId *string `json:"primary_phone_number_id"`

	// PrimaryWeb3WalletId Unique identifier for the primary web3 wallet (null if not set)
	PrimaryWeb3WalletId *string `json:"primary_web3_wallet_id"`

	// PrivateMetadata User's private metadata (empty object for this event)
	PrivateMetadata *map[string]interface{} `json:"private_metadata,omitempty"`

	// ProfileImageUrl User's profile image URL (may be redacted)
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// PublicMetadata User's public metadata (empty object for this event)
	PublicMetadata *map[string]interface{} `json:"public_metadata,omitempty"`

	// TwoFactorEnabled Whether two-factor authentication is enabled
	TwoFactorEnabled bool `json:"two_factor_enabled"`

	// UnsafeMetadata User's unsafe metadata (empty object for this event)
	UnsafeMetadata *map[string]interface{} `json:"unsafe_metadata,omitempty"`

	// UpdatedAt Timestamp (epoch milliseconds) representing user update time
	UpdatedAt *int `json:"updated_at,omitempty"`

	// Username Username (null if not set)
	Username *string `json:"username"`

	// Web3Wallets (Array is empty for this event)
	Web3Wallets *[]map[string]interface{} `json:"web3_wallets,omitempty"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Data ClerkWebhookUserCreatedData `json:"data"`

	// Object Event type (always "user.created" for this event)
	Object string `json:"object"`

	// Type Event type (always "user.created" for this event)
	Type string `json:"type"`
}

// CreateApiKeyRequest defines model for CreateApiKeyRequest.
type CreateApiKeyRequest struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Name      string     `json:"name"`
}

// CreateApplicationRequest defines model for CreateApplicationRequest.
type CreateApplicationRequest struct {
	Name string `json:"name"`
}

// CreateEventTypeRequest defines model for CreateEventTypeRequest.
type CreateEventTypeRequest struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `json:"name"`
	Schema        *string `json:"schema,omitempty"`
	SchemaExample *string `json:"schema_example,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	ArchivedAt     *time.Time      `json:"archived_at,omitempty"`
	CreatedAt      time.Time       `json:"created_at"`
	Id             string          `json:"id"`
	Name           string          `json:"name"`
	OrganizationId string          `json:"organization_id"`
	Type           EnvironmentType `json:"type"`
}

// EnvironmentType defines model for Environment.Type.
type EnvironmentType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// GetAllApiKeysPayload defines model for GetAllApiKeysPayload.
type GetAllApiKeysPayload struct {
	Data []ApiKey `json:"data"`
}

// GetAllEnvironmentsPayload defines model for GetAllEnvironmentsPayload.
type GetAllEnvironmentsPayload struct {
	Data []Environment `json:"data"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	EventTypeId string `json:"event_type_id"`
	Payload     string `json:"payload"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllApiKeysParams defines parameters for GetAllApiKeys.
type GetAllApiKeysParams struct {
	EnvironmentId string `form:"environment_id" json:"environment_id"`
}

// CreateApiKeyParams defines parameters for CreateApiKey.
type CreateApiKeyParams struct {
	EnvironmentId string `json:"environment_id"`
}

// CreateAccountParams defines parameters for CreateAccount.
type CreateAccountParams struct {
	SvixId        string `json:"svix-id"`
	SvixTimestamp string `json:"svix-timestamp"`
	SvixSignature string `json:"svix-signature"`
}

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = CreateApiKeyRequest

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = CreateApplicationRequest

// AddEndpointJSONRequestBody defines body for AddEndpoint for application/json ContentType.
type AddEndpointJSONRequestBody = AddEndpointRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest

// CreateEventTypeJSONRequestBody defines body for CreateEventType for application/json ContentType.
type CreateEventTypeJSONRequestBody = CreateEventTypeRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all api keys
	// (GET /api-keys)
	GetAllApiKeys(ctx echo.Context, params GetAllApiKeysParams) error
	// Create a new api key
	// (POST /api-keys)
	CreateApiKey(ctx echo.Context, params CreateApiKeyParams) error
	// Creates a new application
	// (POST /applications)
	CreateApplication(ctx echo.Context) error
	// Add an endpoint to an application
	// (POST /applications/{applicationID}/endpoints)
	AddEndpoint(ctx echo.Context, applicationID string) error
	// Send a message to an application
	// (POST /applications/{applicationID}/messages)
	SendMessage(ctx echo.Context, applicationID string) error
	// Get all environments
	// (GET /environments)
	GetEnvironments(ctx echo.Context) error
	// Creates a new event type
	// (POST /event-types)
	CreateEventType(ctx echo.Context) error

	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Creates a new account
	// (POST /webhooks/account)
	CreateAccount(ctx echo.Context, params CreateAccountParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllApiKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllApiKeys(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllApiKeysParams
	// ------------- Required query parameter "environment_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment_id", ctx.QueryParams(), &params.EnvironmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllApiKeys(ctx, params)
	return err
}

// CreateApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiKey(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateApiKeyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "environment_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("environment_id")]; found {
		var EnvironmentId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for environment_id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "environment_id", valueList[0], &EnvironmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment_id: %s", err))
		}

		params.EnvironmentId = EnvironmentId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter environment_id is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApiKey(ctx, params)
	return err
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApplication(ctx)
	return err
}

// AddEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) AddEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID string

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEndpoint(ctx, applicationID)
	return err
}

// SendMessage converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "applicationID" -------------
	var applicationID string

	err = runtime.BindStyledParameterWithOptions("simple", "applicationID", ctx.Param("applicationID"), &applicationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter applicationID: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessage(ctx, applicationID)
	return err
}

// GetEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnvironments(ctx)
	return err
}

// CreateEventType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEventType(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEventType(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAccountParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "svix-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-id")]; found {
		var SvixId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-id", valueList[0], &SvixId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-id: %s", err))
		}

		params.SvixId = SvixId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-id is required, but not found"))
	}
	// ------------- Required header parameter "svix-timestamp" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-timestamp")]; found {
		var SvixTimestamp string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-timestamp, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-timestamp", valueList[0], &SvixTimestamp, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-timestamp: %s", err))
		}

		params.SvixTimestamp = SvixTimestamp
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-timestamp is required, but not found"))
	}
	// ------------- Required header parameter "svix-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("svix-signature")]; found {
		var SvixSignature string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for svix-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "svix-signature", valueList[0], &SvixSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter svix-signature: %s", err))
		}

		params.SvixSignature = SvixSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter svix-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api-keys", wrapper.GetAllApiKeys)
	router.POST(baseURL+"/api-keys", wrapper.CreateApiKey)
	router.POST(baseURL+"/applications", wrapper.CreateApplication)
	router.POST(baseURL+"/applications/:applicationID/endpoints", wrapper.AddEndpoint)
	router.POST(baseURL+"/applications/:applicationID/messages", wrapper.SendMessage)
	router.GET(baseURL+"/environments", wrapper.GetEnvironments)
	router.POST(baseURL+"/event-types", wrapper.CreateEventType)
	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.POST(baseURL+"/webhooks/account", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//Ik5LIT0oAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
