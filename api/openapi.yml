openapi: 3.0.3
info:
  title: subscribed-backend
  description: Subscribed's backend
  termsOfService: https://github.com/subscribeddotdev/subscribed-backend
  contact:
    email: firmino.changani@gmail.com
  license:
    name: MIT
    url: https://github.com/subscribeddotdev/subscribed-backend/LICENSE.md
  version: 0.0.1
externalDocs:
  description: https://github.com/subscribeddotdev/subscribed-backend/README.md
  url: https://github.com/subscribeddotdev/subscribed-backend
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      tags:
        - Health
      operationId: healthCheck
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
  /applications:
    post:
      tags:
        - Applications
      operationId: createApplication
      summary: Creates a new application
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /applications/{applicationID}/endpoints:
    post:
      tags:
        - Endpoints
      operationId: addEndpoint
      summary: Add an endpoint to an application
      security:
        - BearerAuth: [ ]
      parameters:
        - name: applicationID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEndpointRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /applications/{applicationID}/messages:
    post:
      tags:
        - Messages
      operationId: sendMessage
      summary: Send a message to an application
      security:
        - ApiKeyAuth: []
      parameters:
        - name: applicationID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /api-keys:
    get:
      tags:
        - ApiKeys
      operationId: getAllApiKeys
      summary: Get all api keys
      security:
        - BearerAuth: [ ]
      parameters:
        - name: environment_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllApiKeysPayload'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - ApiKeys
      operationId: createApiKey
      summary: Create a new api key
      security:
        - BearerAuth: [ ]
      parameters:
        - name: environment_id
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /event-types:
    post:
      tags:
        - EventTypes
      operationId: createEventType
      summary: Creates a new event type
      security:
      - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventTypeRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /webhooks/account:
    post:
      tags:
        - Auth
      operationId: createAccount
      summary: Creates a new account
      parameters:
        - in: header
          name: svix-id
          schema:
            type: string
          required: true
        - in: header
          name: svix-timestamp
          schema:
            type: string
          required: true
        - in: header
          name: svix-signature
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /environments:
    get:
      tags:
        - Environments
      operationId: getEnvironments
      summary: Get all environments
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllEnvironmentsPayload'
        default:
          $ref: '#/components/responses/DefaultError'

components:
  schemas:
    ClerkWebhookEmailAddress:
      required: [email_address, id, linked_to]
      properties:
        email_address:
          type: string
          description: User's email address
        id:
          type: string
          description: Unique identifier for the email address
        linked_to:
          type: array
          description: (Array is empty for this event)
          nullable: true
          items:
            type: object
            # Add properties for linked objects if needed
        object:
          type: string
          description: Object type (always "email_address" for this event)
        verification:
          type: object
          properties:
            status:
              type: string
              description: Verification status (e.g., "verified", "unverified")
            strategy:
              type: string
              description: Verification strategy (e.g., "ticket", "link")
    ClerkWebhookUserCreatedData:
      required: [ id, password_enabled, two_factor_enabled, created_at, email_addresses ]
      properties:
        birthday:
          type: string
          description: User's birthday (empty string if not set)
        created_at:
          type: integer
          description: Timestamp (epoch milliseconds) representing user creation time
        email_addresses:
          type: array
          items:
            $ref: '#/components/schemas/ClerkWebhookEmailAddress'
        external_accounts:
          type: array
          description: (Array is empty for this event)
          items:
            type: object
            # Add properties for external accounts if needed
        external_id:
          type: string
          nullable: true
          description: User's external identifier
        first_name:
          type: string
          nullable: true
          description: User's first name
        gender:
          type: string
          description: User's gender (empty string if not set)
        id:
          type: string
          description: Unique identifier for the user
        image_url:
          type: string
          description: User's image URL (may be redacted)
        last_name:
          type: string
          nullable: true
          description: User's last name
        last_sign_in_at:
          type: integer
          nullable: true
          description: Timestamp (epoch milliseconds) representing last sign-in time
        object:
          type: string
          description: Object type (always "user" for this event)
        password_enabled:
          type: boolean
          description: Whether the user has password authentication enabled
        phone_numbers:
          type: array
          description: (Array is empty for this event)
          items:
            type: object
            # Add properties for phone numbers if needed
        primary_email_address_id:
          type: string
          nullable: true
          description: Unique identifier for the primary email address
        primary_phone_number_id:
          type: string
          nullable: true
          description: Unique identifier for the primary phone number (null if not set)
        primary_web3_wallet_id:
          type: string
          nullable: true
          description: Unique identifier for the primary web3 wallet (null if not set)
        private_metadata:
          type: object
          description: User's private metadata (empty object for this event)
        profile_image_url:
          type: string
          description: User's profile image URL (may be redacted)
        public_metadata:
          type: object
          description: User's public metadata (empty object for this event)
        two_factor_enabled:
          type: boolean
          description: Whether two-factor authentication is enabled
        unsafe_metadata:
          type: object
          description: User's unsafe metadata (empty object for this event)
        updated_at:
          type: integer
          description: Timestamp (epoch milliseconds) representing user update time
        username:
          type: string
          nullable: true
          description: Username (null if not set)
        web3_wallets:
          type: array
          description: (Array is empty for this event)
          items:
            type: object
            # Add properties for web3 wallets if needed
    CreateAccountRequest:
      required: [data, object, type]
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ClerkWebhookUserCreatedData'
        object:
          type: string
          description: Event type (always "user.created" for this event)
        type:
          type: string
          description: Event type (always "user.created" for this event)
    # Endpoints
    AddEndpointRequest:
      required: [ url ]
      properties:
        url:
          type: string
        description:
          type: string
        event_type_ids:
          type: array
          items:
            type: string
    # Applications
    CreateApplicationRequest:
      required: [ name ]
      properties:
        name:
          type: string
    # Messages
    SendMessageRequest:
      required: [ event_type_id, payload ]
      properties:
        event_type_id:
          type: string
        payload:
          type: string
    # Event types
    CreateEventTypeRequest:
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        schema:
          type: string
        schema_example:
          type: string
    # API Keys
    CreateApiKeyRequest:
      required: [name]
      properties:
        name:
          type: string
        expires_at:
          type: string
          format: date-time
    ApiKey:
      required: [name, masked_secret_key, organization_id, environment_id, created_at]
      properties:
        name:
          type: string
        organization_id:
          type: string
        environment_id:
          type: string
        masked_secret_key:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    GetAllApiKeysPayload:
      required: [ data ]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
    # Environments
    Environment:
      required: [id, name, organization_id, name, type, created_at]
      properties:
        id:
          type: string
        organization_id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - production
            - development
        created_at:
          type: string
          format: date-time
        archived_at:
          type: string
          format: date-time
    GetAllEnvironmentsPayload:
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
    # Generic responses and errors
    GenericResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        message:
          type: string
          description: A description about the error
        error:
          type: string
          description: Error custom error code such as 'email_in_use'
  responses:
    UnauthorizedError:
      description: 'Usually causes by an authentication token missing'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    DefaultSuccess:
      description: 'Default message when an operation succeeds'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericResponse'
    DefaultError:
      description: 'A generic error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
